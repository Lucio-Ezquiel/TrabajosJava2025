/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation libs.junit

    // This dependency is used by the application.
    implementation libs.guava
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    // implementation group: 'org.apache.logging.log3j', name: 'log4j-api', version: '2.20.0'
    // implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.20.0'
    // implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.20.0'
    // // log4j2
    // implementation platform('org.apache.logging.log4j:log4j-bom:2.24.3')
    // implementation 'org.apache.logging.log4j:log4j-api:${log4j-api.version}' 
    // // The logging implementation (i.e., Log4j Core)
    // runtimeOnly 'org.apache.logging.log4j:log4j-core'
    // runtimeOnly 'org.apache.logging.log4j:log4j-layout-template-json'
    //
    // // Log4j JSON-encoding support
    // // Assuming `log4j-bom`, `log4j-core`, and `log4j-layout-template-json` is added
    //
    // // SLF4J-to-Log4j bridge
    // runtimeOnly 'org.apache.logging.log4j:log4j-slf4j2-impl'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}
// Define a task to run a specific class in package1
task runApp(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.example.App' // Set the class you want to run here
}

// Define a task to run a specific class in package2
task runMilog(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.milog.Milog' // Set the class you want to run here
}
